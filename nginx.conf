
load_module "modules/ngx_http_image_filter_module.so";

user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}



http {

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;
  error_page 401 /401.html;

  # allow only whitelisted domains
  include /etc/nginx/security.conf;


  proxy_cache_path /tmp/imgcache levels=1:2 keys_zone=imgcache:60m inactive=90m max_size=1000m;

  server {



    # Uncomment for verbose debugging
    #error_log /var/log/nginx/error.log debug;

    # Uses the Nginx image filter module to dynamically resize and store the resized image on server
    # http://nginx.org/en/docs/http/ngx_http_image_filter_module.html

    # Modified from an original
    # https://gist.github.com/phpdude/1451684

    # Intention is to support most of the commands here:
    # https://github.com/beetlebugorg/mod_dims/wiki/Webservice-API
    # e.g. http://<dims-host>/resize/100x100/http://media.parker.beetlebug.org/archive/2009/03/17/DSC_D300_1872.web.jpg
    listen   80; ## listen for ipv4; this line is default and implied
    server_name _;
    server_tokens off;
    log_subrequest on;
    rewrite_log on;

    # NOTE: this directory needs to have the permissions set to 777 so proxy_store will work correctly
    root /usr/share/nginx/html;

    # Needed to allow requested image uri protocol slashes from being merged (used when proxying for source image)
    merge_slashes off;

    # Will proxy to external urls and gets remote images, the following will allow it to resolve properly
    resolver 8.8.8.8;  # Google DNS

    # Allows us to respond to proxy redirects with things like error_page
    proxy_intercept_errors      on;
    proxy_pass_request_body     off;
    proxy_pass_request_headers  off;


    # Hide Amazon Headers
    proxy_hide_header           X-Amz-Id-2;
    proxy_hide_header           X-Amz-Request-Id;

    # Help proxy_cahe with expire time
    proxy_pass_header 		"X-Accel-Expires";

    # Need to also handle HEAD requests
    proxy_method                GET;

    # This is the secret sauce to allow us to handle proxy redirects with image uri's
    recursive_error_pages       on;

    # Sets the maximum size for images during a request
    image_filter_buffer         10M;
    image_filter_jpeg_quality   95;

    location = /favicon.ico {
        log_not_found off;
    }

  # catch route and send to internal functions
  #
  include /etc/nginx/route.conf;

  # do change on images or get info from image
  # allow redirect on target URL
  #
  include /etc/nginx/internal.conf;

  }
}